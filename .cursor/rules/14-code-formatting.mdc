---
description:
globs:
alwaysApply: true
---
# Code Formatting Guidelines

This document defines the code formatting and style standards to ensure consistency and readability across the codebase.

## Formatting Tools

The project uses the following tools for code formatting and checking:
- Biome - For code formatting and linting
- EditorConfig - For defining basic editor settings

## TypeScript/JavaScript Formatting

### Basic Formatting
- Use single quotes for string literals
- Maximum line length of 100 characters
- Use 2 spaces for indentation, no tabs
- Use semicolons at the end of statements
- Include spaces around operators (e.g., `a + b` instead of `a+b`)
- Always use curly braces for control statements, even for single-line blocks
- Place opening braces on the same line as their statement
- Add a space before the opening brace of blocks
- No trailing whitespace at the end of lines

### Naming Conventions
- Use `camelCase` for variable and function names
- Use `PascalCase` for class and component names
- Use `UPPER_SNAKE_CASE` for constants
- Don't prefix interfaces with `I`
- Don't prefix types with `T`
- Use descriptive and meaningful names

## JSX Formatting

- Place each attribute on a new line when a component has multiple attributes
- Use self-closing tags for elements without children
- Use proper indentation for nested elements
- Keep JSX expressions simple, extract complex logic to variables
- Avoid complex boolean expressions in JSX - create helper functions or variables
- Put closing brackets for multi-line JSX on a new line

## CSS/Tailwind Formatting

- Group related Tailwind utility classes together
- Follow a consistent order of utilities (layout, sizing, spacing, typography, colors, etc.)
- Use descriptive class names for custom CSS
- Prefer Tailwind utilities over custom CSS when possible
- For custom CSS, use kebab-case for class names and properties

## Formatting and Linting Commands

After modifying code in the Refly project, it's important to run formatting and linting checks to ensure code quality and consistency.

### Available Commands

The project uses Biome for linting and formatting. You can run the following commands:

```bash
# Check and automatically fix linting issues
pnpm check:fix

# Format code
pnpm format

# Run linting without fixing
pnpm check
```

These commands should be run from the project root directory.

### Before Submitting Changes

Always run these commands before submitting changes:

1. `pnpm check:fix` - This will identify and fix common issues
2. `pnpm format` - This will format the code according to project standards

### EditorConfig

The project uses [.editorconfig](mdc:.editorconfig) to maintain consistent coding styles. Make sure your editor respects these settings.

### Biome Configuration

The Biome configuration is defined in [biome.json](mdc:biome.json), which specifies the formatting and linting rules for the project.

### Continuous Integration

These checks are also run in CI pipelines, so running them locally before pushing will prevent CI failures.